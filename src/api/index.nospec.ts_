import { describe, expect, it, jest,xit } from "@jest/globals";

import { RESTAPI } from ".";

const USER = {
  name: "Anton",
  email: "anton@anton.org",
  created_at: "2023-02-11T14:52:14.565Z",
}

const createClient = () => ({
  get: jest.fn(() => Promise.resolve({ data: USER })),
  post: jest.fn(() => Promise.resolve({ data: USER })),
  patch: jest.fn(() => Promise.resolve({ data: USER })),
  list: jest.fn(() => Promise.resolve({ data: [USER] })),
  delete: jest.fn(() => Promise.resolve()),
});

describe("RESTAPI", () =>  {
  const client = createClient()
  const api = new RESTAPI({ 
    url: "/users",
    client,
  });

  xit("should get entity", async () => {
    expect(await api.get({ urlParams: { pk: 1 }})).toEqual({
      name: "Anton",
      email: "anton@anton.org",
      created_at: "2023-02-11T14:52:14.565Z",
    });
    expect(client.get).toBeCalledWith("/users/1")
  });

  xit("should list entity", async () => {
    // @ts-ignore
    client.get = jest.fn(() => Promise.resolve({ data: [USER] })),
    expect(await api.list({ urlParams: { pk: 1 }})).toEqual([{
      name: "Anton",
      email: "anton@anton.org",
      created_at: "2023-02-11T14:52:14.565Z",
    }]);
    expect(client.get).toBeCalledWith("/users")
  });

  xit("should create entity", async () => {
    expect(await api.create({ data: USER })).toEqual({
      name: "Anton",
      email: "anton@anton.org",
      created_at: "2023-02-11T14:52:14.565Z",
    });
    expect(client.post).toBeCalledWith("/users", USER)
  });

  xit("should update entity", async () => {
    expect(await api.update({ urlParams: { pk: 1 }, data: USER })).toEqual({
      name: "Anton",
      email: "anton@anton.org",
      created_at: "2023-02-11T14:52:14.565Z",
    });
    expect(client.patch).toBeCalledWith("/users/1", USER)
  });

  xit("should delete entity", async () => {
    expect(await api.delete({ urlParams: { pk: 1 }})).toEqual(undefined);
    expect(client.delete).toBeCalledWith("/users/1")
  });
});
