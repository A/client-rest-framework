import { APIRepository } from "./APIRepository";

type RequestSymbol = typeof APIRepository.CREATE_REQUEST_KEY |
  typeof APIRepository.UPDATE_REQUEST_KEY |
  typeof APIRepository.LIST_REQUEST_KEY |
  typeof APIRepository.GET_REQUEST_KEY |
  typeof APIRepository.DELETE_REQUEST_KEY


export class MobxObservableAPIRepository<DTOItem> extends APIRepository<DTOItem> {
  pendingRequests: RequestSymbol[] = [];

  static readonly CREATE_REQUEST_KEY = "create";
  static readonly LIST_REQUEST_KEY = "list";
  static readonly GET_REQUEST_KEY = "get";
  static readonly UPDATE_REQUEST_KEY = "update";
  static readonly DELETE_REQUEST_KEY = "delete";

  constructor() {
    makeObservable(this, {
      pendingRequests: observable,
    });
  }


  hasPendingRequests = (requestSymbols?: RequestSymbol[]) => {
    if (!requestSymbols) {
      return Boolean(this.pendingRequests.length > 0)
    }
    for (let sym of requestSymbols) {
      const hasPendingRequests = Boolean(this.pendingRequests.filter(s => s === sym).length > 0);
      if (hasPendingRequests) {
        return true
      }
    }
    return false
  }

  addPendingRequest = (requestSymbol: RequestSymbol) => this.pendingRequests.push(requestSymbol);
  removePendingRequest = (requestSymbol: RequestSymbol) => this.pendingRequests.splice(
    this.pendingRequests.indexOf(requestSymbol),
    1
  );
}
